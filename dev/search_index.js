var documenterSearchIndex = {"docs":
[{"location":"release-notes/#Release-Notes","page":"Release notes","title":"Release Notes","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"This project uses Semantic Versioning. The format of the release notes follows Keep a Changelog.","category":"page"},{"location":"release-notes/#[Unreleased]","page":"Release notes","title":"[Unreleased]","text":"","category":"section"},{"location":"release-notes/#Deprecated","page":"Release notes","title":"Deprecated","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Path checks in pwd(::SFTP.Client) are deprecated (#13). This should be done during the instantiation of the SFTP.Client.","category":"page"},{"location":"release-notes/#Fixed","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Add fallback solution to determine a filemode in analyse_path with restricted access to the parent folder (#14).","category":"page"},{"location":"release-notes/#[v0.1.1](https://github.com/LIM-AeroCloud/SFTP.jl/releases/tag/v0.1.1)-2025-05-24","page":"Release notes","title":"v0.1.1 - 2025-05-24","text":"","category":"section"},{"location":"release-notes/#Added","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Overload Julia's dirname with a method for SFTP (#9).","category":"page"},{"location":"release-notes/#Deprecated-2","page":"Release notes","title":"Deprecated","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The following methods have been deprecated to avoid type piracy (#8):\npwd(::URI)\nsplitdir(::URI)\nbasename(::URI)\nFor joinpath, the provided method by the URIs package is used, an internal cwd function replaces pwd, splitdir and basename will be removed without replacement.","category":"page"},{"location":"release-notes/#Removed","page":"Release notes","title":"Removed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The joinpath(::URI, paths::AbstractString...) method is directly removed as it seems, previously URIs' joinpath method was used anyway (#8).","category":"page"},{"location":"release-notes/#Fixed-2","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Ensure all AbstractString paths are converted to String in function readdir for correct processing of the paths (#10).","category":"page"},{"location":"release-notes/#[v0.1.0](https://github.com/LIM-AeroCloud/SFTP.jl/releases/tag/v0.1.0)-2025-05-18","page":"Release notes","title":"v0.1.0 - 2025-05-18","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The initial release is based on SFTPClient (v0.4.4). All changes for this released are documented in respect to this version.","category":"page"},{"location":"release-notes/#Added-2","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Initial release with new project name SFTP.jl and new initial version v0.1.0\nPrefer Logging over simple print commands\nOverload stat with simplified stat method for a single path object (in contrast to statscan that scans the whole folder) and return an SFTP.StatStruct\nOverlaod Base functions for the file system; new methods added for:\nispath\npwd\nmkdir (previous mkdir was renamed to mkpath)\njoinpath\nsplitdir\nbasename\nAdd labels for docs, CI status and Codecov in Readme\nAdd workflow for compat helper\nAdd changelog and automate with Changelog.jl","category":"page"},{"location":"release-notes/#Changed","page":"Release notes","title":"Changed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Update API\nexported: upload, statscan,URI\npublic: Client, StatStruct, download, stat, filemode, ispath, isdir, isfile, islink, pwd, cd, mv,rm, mkdir, mkpath,  readdir, walkdir, joinpath, splitdir, basename\nCompletely refactor code base, use concise variable names, format source code\nRename SFTPStatStruct to StatStruct (unexported) and refactor constructors\nRename SFTP to Client (unexported) and refactor constructors\nRename sftpstat to statscan\nRename mkdir to mkpath (as it has the functionality of mkpath, add new method for mkdir)\nUpdate functionality of file system functions to more close resemble Julia's Base functions\nCombine rm/rmdir in rm with a force flag\nSort results in readdir, stat, statscan, and walkdir (can be switched off with sort flag)\nIntroduce more checks and restrictions based on Julia's file system function/Unix functions\nCheck validity of a path\nAdd methods to pass a path as String to filemode and related functions instead of  a StatStruct object\nAllow recursive methods, where appropriate\nAllow upload/download of directories\nAdd force/merge flag\nAllow filtering of hidden files\nUpdate and unify how paths are defined on the remote and local system\nRefactor and extent tests\nUpdate documentation","category":"page"},{"location":"release-notes/#Removed-2","page":"Release notes","title":"Removed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Remove CSV as dependecy and use readlines instead\nRemove FileWatching, ArgTools, and NetworkOptions as dependency","category":"page"},{"location":"release-notes/#Fixed-3","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Overload walkdir and download instead of defining new functions\nEnsure Windows paths are processed correctly\nSeveral fixes concerning the representation of paths (especially under Windows)\nSymlinks are now recognised by stat/statscan\nwalkdir correctly follows symlinks","category":"page"},{"location":"server/#Server-functionality","page":"Server","title":"Server functionality","text":"","category":"section"},{"location":"server/","page":"Server","title":"Server","text":"The main purpose of SFTP.jl is to connect to a server with the secure file transfer protocol and exchange files between the server and the local system.","category":"page"},{"location":"server/#Connecting-to-the-server","page":"Server","title":"Connecting to the server","text":"","category":"section"},{"location":"server/","page":"Server","title":"Server","text":"SFTP.jl takes care of the connection to the server all by itself. All that needs to be done is to instantiate a SFTP.Client with one of the appropriate constructors for either authentication with username and password or with a certificate.","category":"page"},{"location":"server/#SFTP.Client","page":"Server","title":"SFTP.Client","text":"mutable struct SFTP.Client\n\nSFTP manages the connection to the server and stores all relevant connection data.\n\nFields\n\ndownloader::Downloader: for handling downloads and managing connections, name lookups, and other resources\nuri::URI: save the URI including the present path on the sftp server\nusername::String: mandatory user name\npassword::String: optional password, for access by username/password\ndisable_verify_peer::Bool: disable verification of the peer's SSL certificate\ndisable_verify_host::Bool: disable verification of the certificate's name against host\nverbose::Bool: set Curl verbosity\npublic_key_file::String: the public key file of the certificate authentication\nprivate_key_file::String: the private key file of the certificate authentication\n\nConstructors\n\nSFTP.Client(url::AbstractString, username::AbstractString, public_key_file::AbstractString, public_key_file::AbstractString; kwargs) -> SFTP.Client\nSFTP.Client(url::AbstractString, username::AbstractString, password::AbstractString=\"\"; kwargs) -> SFTP.Client\n\nnote: Note\nA username must be provided for both methods to work.\n\nwarning: Setup certificate authentication\nBefore using the constructor method for certificate authentication, private and public key files must be created and stored in the ~/.ssh folder and on the server and the local system, respectively, e.g., ~/.ssh/idrsa and ~/.ssh/idrsa.pub. Additionally, the host must be added to the known_hosts file in the ~/.ssh folder.\n\nnote: Testing certificate authentication\nThe correct setup can be tested in the terminal with ssh myuser@mysitewhereIhaveACertificate.com.\n\nConstruct an SFTP.Client from the url and either user information or public and private key files.\n\nArguments\n\nurl: The url to connect to, e.g., sftp://mysite.com\nusername/password: user credentials\npublic_key_file/public_key_file: authentication certificates\n\nKeyword arguments\n\nThe following keyword arguments exist with default values given in parentheses:\n\ncreate_known_hosts_entry: Automatically create an entry in known hosts\ndisable_verify_peer: verify the authenticity of the peer's certificate\ndisable_verify_host: verify the host in the server's TLS certificate\nverbose: display a lot of verbose curl information\n\nExamples\n\nsftp = SFTP.Client(\"sftp://mysitewhereIhaveACertificate.com\", \"myuser\", \"test.pub\", \"test.pem\")\nsftp = SFTP.Client(\"sftp://mysitewhereIhaveACertificate.com\", \"myuser\")\nsftp = SFTP.Client(\"sftp://test.rebex.net\", \"demo\", \"password\")\n\n\n\n\n\n","category":"type"},{"location":"server/#File-exchange-with-the-server","page":"Server","title":"File exchange with the server","text":"","category":"section"},{"location":"server/","page":"Server","title":"Server","text":"Use the upload and download functions to exchange data with the SFTP server. Options exist for conflicts with already existing files to throw an error, skip the exchange or force an overwrite. The functions can be used to exchange single files, exchange directories recursively or broadcast over a number of files or folders.","category":"page"},{"location":"server/","page":"Server","title":"Server","text":"For download, an additional method exists to save contents from a remote file directly to a variable.","category":"page"},{"location":"server/#SFTP.upload","page":"Server","title":"SFTP.upload","text":"upload(sftp::Client,  src::AbstractString=\".\", dst::AbstractString=\".\"; kwargs...) -> String\n\nUpload (put) src to dst on the sftp server; src can be a file or folder. Folders are uploaded recursively. dst must be an existing folder on the server, otherwise an IOError is thrown. src may include an absolute or relative path on the local system, which is ignored on the server. dst can be an absolute path or a path relative to the current uri path of the sftp server. The function returns dst as String.\n\nsee also: download/ download method\n\nKeyword arguments\n\nmerge::Bool=false: download into existing folders, when true or throw an IOError\nforce::Union{Nothing,Bool}=nothing: Handle conflicts of existing files/folders\nnothing (default): throw IOError for conflicts\ntrue: overwrite existing files/folders\nfalse: skip existing files/folders\nif merge = true, force counts only for files\nignore_hidden::Bool=false: ignore hidden files and folders, if true\nhide_identifier::Union{Char,AbstractString}='.': start sequence of hidden files and folders\n\nExamples\n\nsftp = SFTP.Client(\"sftp://test.rebex.net\", \"demo\", \"password\")\n\nupload(sftp, \"data/test.csv\", \"/tmp\") # upload data/test.csv to /tmp/test.csv\n\nfiles=readdir()\nupload.(sftp, files) # upload the current directory to the current directory on the server\n\nupload(sftp, ignore_hidden=true) # the current folder is uploaded to the server without hidden objects\n\n\n\n\n\n","category":"function"},{"location":"server/#Base.download","page":"Server","title":"Base.download","text":"download(sftp::Client, src::AbstractString=\".\", dst::AbstractString=\".\"; kwargs...) -> String\n\nDownload src from the sftp server to dst on the local system; src can be a file or folder. Folders are downloaded recursively. dst must be an existing folder on the local system, otherwise an IOError is thrown. src may include an absolute or relative path on the sftp server, which is ignored on the local system. dst can be an absolute or relative path on the local system. The function returns dst as String.\n\nsee also: upload, other download method\n\nKeyword arguments\n\nmerge::Bool=false: download into existing folders, when true or throw an IOError\nforce::Union{Nothing,Bool}=nothing: Handle conflicts of existing files/folders\nnothing (default): throw IOError for conflicts\ntrue: overwrite existing files/folders\nfalse: skip existing files/folders\nif merge = true, force counts only for files\nignore_hidden::Bool=false: ignore hidden files and folders, if true\nhide_identifier::Union{Char,AbstractString}='.': start sequence of hidden files and folders\n\nExample\n\nsftp = SFTP.Client(\"sftp://test.rebex.net/pub/example/\", \"demo\", \"password\")\nfiles=readdir(sftp)\ndownload_dir=\"/tmp\"\ndownload.(sftp, files, download_dir)\n\nAlternatively:\n\nsftp = SFTP.Client(\"sftp://test.rebex.net/pub/example/\", \"demo\", \"password\")\ndonwload(sftp) # downloads current folder on server to current directory on local system\n\n\n\n\n\n","category":"function"},{"location":"server/#Base.download-Tuple{Function, SFTP.Client, AbstractString}","page":"Server","title":"Base.download","text":"download(fcn::Function, sftp::SFTP.Client, src::AbstractString)\n\nDownload src from the sftp server and use fcn to retrieve the data from src. src may include an absolute or relative path to a file on the sftp server. Only temporary files are created on the local system and directly deleted after data reading.\n\nsee also: upload, other download method\n\ninfo: Defining read functions\nfcn must have one AbstractString parameter, which is used to pass the temporary file path to any function that reads the contents. The function must return the contents of the file in any desired format, e.g. Matrix, DataFrame or array.\n\nExamples\n\nusing CSV\n# Define functions to process the file data\nfcsv(path::AbstractString)::Matrix{Int} = CSV.read(path, CSV.Tables.matrix)\nfread(path::AbstractString)::Vector{String} = readlines(path)\n# Download data to variable\nmatrix = download(fcsv, sftp, \"data/matrix.csv\")\narray = download(fread, sftp, \"data/matrix.csv\")\n\n\n\n\n\n","category":"method"},{"location":"filesystem/#Filesystem-functions","page":"Filesystem","title":"Filesystem functions","text":"","category":"section"},{"location":"filesystem/","page":"Filesystem","title":"Filesystem","text":"SFTP.jl overloads a number of Julia's Base Filesystem functions to navigate and manipulate server paths and retrieve stats on path objects (files, symlinks or folders). The SFTP filesystem methods mimic Julia's Filesystem functions or Linux filesystem functions, respectively, however, SFTP.jl's functionality might be reduced.","category":"page"},{"location":"filesystem/#URI","page":"Filesystem","title":"URI","text":"","category":"section"},{"location":"filesystem/","page":"Filesystem","title":"Filesystem","text":"Several of the Filesystem functions return a URI struct from the URIs package to represent the complete server address including the path on the server. URI structs are also accepted as input argument by serveral of SFTP.jl's Filesystem functions. For easier handling, the URI struct is exported by SFTP.jl as well. See URIs' documentation for more details on the URI struct.","category":"page"},{"location":"filesystem/#Navigating-server-paths","page":"Filesystem","title":"Navigating server paths","text":"","category":"section"},{"location":"filesystem/","page":"Filesystem","title":"Filesystem","text":"warning: Deprecation warning\nThe pwd method for URI structs will be deprecated in v0.2.0 and replaced by and internal cwd method to avoid type piracy.","category":"page"},{"location":"filesystem/#Base.Filesystem.pwd","page":"Filesystem","title":"Base.Filesystem.pwd","text":"pwd(sftp::SFTP.Client) -> String\n\nGet the current directory of the sftp server. Also checks whether the path is valid and throws an IOError otherwise.\n\nsee also: cd, mv, rm\n\n\n\n\n\npwd(uri::URI) -> String\n\nReturn the current path of the uri.\n\n\n\n\n\n","category":"function"},{"location":"filesystem/#Base.Filesystem.cd-Tuple{SFTP.Client, AbstractString}","page":"Filesystem","title":"Base.Filesystem.cd","text":"cd(sftp::SFTP.Client, dir::AbstractString)\n\nSet the current working directory as dir in the uri of the sftp client.\n\nsee also: pwd, mv, rm\n\n\n\n\n\n","category":"method"},{"location":"filesystem/#Base.Filesystem.mv-Tuple{SFTP.Client, AbstractString, AbstractString}","page":"Filesystem","title":"Base.Filesystem.mv","text":"mv(\n    sftp::SFTP.Client,\n    src::AbstractString,\n    dst::AbstractString;\n    force::Bool=false\n)\n\nMove src to dst on the sftp server. dst must be moved to an existing parent folder; src is overwritten without warning, if force is set to true.\n\nsee also: pwd, cd, rm\n\n\n\n\n\n","category":"method"},{"location":"filesystem/#Base.Filesystem.rm-Tuple{SFTP.Client, AbstractString}","page":"Filesystem","title":"Base.Filesystem.rm","text":"rm(sftp::SFTP.Client, path::AbstractString; recursive::Bool=false, force::Bool=false)\n\nRemove (delete) the path on the sftp server. Set the recursive flag to remove folders recursively. Suppress errors by setting force to true.\n\nwarning: Warning\nRecursive deletions can be very slow for large folders.\n\nsee also: pwd, cd, mv\n\n\n\n\n\n","category":"method"},{"location":"filesystem/#Base.Filesystem.mkdir-Tuple{SFTP.Client, AbstractString}","page":"Filesystem","title":"Base.Filesystem.mkdir","text":"mkdir(sftp::SFTP.Client, dir::AbstractString) -> String\n\nCreate a new dir on the sftp server and return the name of the created directory. Although a path can be given as dir, dir can only be created in an existing directory, i.e. the path up to the basename of dir must exist. Otherwise, and in case of already existing folders, an error is thrown.\n\nsee also: mkpath\n\n\n\n\n\n","category":"method"},{"location":"filesystem/#Base.Filesystem.mkpath-Tuple{SFTP.Client, AbstractString}","page":"Filesystem","title":"Base.Filesystem.mkpath","text":"mkpath(sftp::SFTP.Client, path::AbstractString) -> String\n\nCreate a path including all missing intermediate folders on the sftp server and return path as String on success. No errors are thrown for existing paths.\n\nSee also: mkdir\n\n\n\n\n\n","category":"method"},{"location":"filesystem/#Base.Filesystem.readdir-Tuple{SFTP.Client, AbstractString}","page":"Filesystem","title":"Base.Filesystem.readdir","text":"readdir(\n    sftp::Client,\n    path::AbstractString=\".\";\n    join::Bool=false,\n    sort::Bool=true,\n    check_path::Bool=false\n) -> Vector{String}\n\nReturn the names of all objects in the directory dir (or the current working directory if not given) on the sftp server. If join is set to true, the list of file names includes the absolute paths. Sorting of file names can be switched off with the sort flag to optimise performance. Depending on the server settings, readdir may return an empty vector for non-existant paths. To ensure an error is thrown for non-existant paths, set check_path to true.\n\nnote: Note\nSetting check_path to true can drastically reduce the performance for large folders. If you know the folder structure, you should avoid setting this flag.\n\nsee also: walkdir\n\n\n\n\n\n","category":"method"},{"location":"filesystem/#Base.Filesystem.walkdir-Tuple{SFTP.Client, AbstractString}","page":"Filesystem","title":"Base.Filesystem.walkdir","text":"walkdir(\n    sftp::Client,\n    root::AbstractString=\".\";\n    topdown::Bool=true,\n    follow_symlinks::Bool=false,\n    skip_restricted_access::Bool=true,\n    sort::Bool=true,\n    ignore_hidden::Bool=false,\n    hide_identifier::Union{AbstractString,Char}='.'\n) -> Channel{Tuple{String,Vector{String},Vector{String}}}\n\nReturn an iterator that walks the directory tree of the given root on the sftp server. If the root is omitted, the current URI path of the sftp server is used. The iterator returns a tuple containing (rootpath, dirs, files). The directory tree can be traversed top-down (topdown=true) or bottom-up (topdown=false).\n\nIf follow_symlinks is set to true, the sources of symlinks are listed rather than the symlink itself as a file. If sort is set to true, the files and directories are listed alphabetically. Hidden paths starting with the hide_identifier sequence can be skipped by setting ignore_hidden to true.\n\nIf a remote folder has restricted access, these directories are skipped with an info output on the terminal unless skip_restricted_access is set to false, in which case an Downloads.RequestError is thrown.\n\nsee also: readdir\n\nExamples\n\nsftp = SFTP.Client(\"sftp://test.rebex.net/pub/example/\", \"demo\", \"password\")\nfor (root, dirs, files) in walkdir(sftp, \"/\")\n    println(\"Directories in $root\")\n    for dir in dirs\n        println(joinpath(root, dir)) # path to directories\n    end\n    println(\"Files in $root\")\n    for file in files\n        println(joinpath(root, file)) # path to files\n    end\nend\n\n\n\n\n\n","category":"method"},{"location":"filesystem/#Analyse-and-manipulate-server-paths","page":"Filesystem","title":"Analyse and manipulate server paths","text":"","category":"section"},{"location":"filesystem/","page":"Filesystem","title":"Filesystem","text":"warning: Deprecation warning\nAll methods using URI instead of SFTP.Client in basename and splitdir will be deprecated in v0.2.0 to avoid type piracy.","category":"page"},{"location":"filesystem/","page":"Filesystem","title":"Filesystem","text":"warning: Known issue\nURIs' joinpath method currently assigns two leading slashes (//) instead of one, if an absolute path is assigned to an empty URI path. This issue is addressed in PR #62.","category":"page"},{"location":"filesystem/#Base.Filesystem.joinpath","page":"Filesystem","title":"Base.Filesystem.joinpath","text":"joinpath(sftp::SFTP.Client, path::AbstractString...) -> URI\n\nJoin any path with the uri of the sftp server and return an URI with the updated path. Any path components prior to an absolute path are dropped.\n\nnote: Note\nThe uri field of the sftp client remains unaffected by joinpath. Use sftp.uri = joinpath(sftp, \"new/path\") to update the URI on the sftp server.\n\n\n\n\n\n","category":"function"},{"location":"filesystem/#Base.Filesystem.splitdir","page":"Filesystem","title":"Base.Filesystem.splitdir","text":"splitdir(sftp::SFTP.Client, path::AbstractString=\".\") -> Tuple{URI,String}\n\nJoin the path with the path of the URI in sftp and then split it into the directory name and base name. Return a Tuple of URI with the split path and a String with the base name.\n\nnote: Note\nThe returned path in the URI always contains a trailing slash while the basename is always without a slash.\n\nwarning: Difference to Julia's splitdir method\nsplitdir splits the last non-empty path part from the remaining path. In contrast to Julia's splitdir method, trailing slashes do not result in an empty base name, but return the base name before the trailing slash.\n\nsee also: basename\n\n\n\n\n\nsplitdir(uri::URI) -> Tuple{URI, String}\n\nSplit the uri path into a directory and base part. The directory is returned as a URI with a trailing slash in the path.\n\n\n\n\n\n","category":"function"},{"location":"filesystem/#Base.Filesystem.dirname","page":"Filesystem","title":"Base.Filesystem.dirname","text":"dirname(sftp::SFTP.Client, path::AbstractString=\".\") -> String\n\nGet the directory part of a path on the sftp server.\n\n\n\n\n\n","category":"function"},{"location":"filesystem/#Base.Filesystem.basename","page":"Filesystem","title":"Base.Filesystem.basename","text":"basename(sftp::SFTP.Client, path::AbstractString=\".\") -> String\n\nGet the file name or current folder name of a path. The path can be absolute or relative to the uri itself or of the sftp server given. If no path is given, the current path from the uri or sftp server is taken.\n\nwarning: Difference to Julia's basename method\nIn contrast to Julia's basename, trailing slashes in paths are ignored and the last non-empty part is returned, except for the root, where the basename is empty.\n\nsee also: splitdir\n\n\n\n\n\nbasename(uri::URI) -> String\n\nReturn the base name (last non-empty part after a path separator (/ or \\ in Windows)) of the uri path.\n\n\n\n\n\n","category":"function"},{"location":"filesystem/#Getting-statistics-on-path-objects","page":"Filesystem","title":"Getting statistics on path objects","text":"","category":"section"},{"location":"filesystem/","page":"Filesystem","title":"Filesystem","text":"The SFTP.StatStruct holds all relevant information on server path objects. It can be directly analysed by functions analysing the filemode (filemode, isdir, isfile or islink). For these functions, additional convenience methods exist, which take the SFTP.Client and an AbstractString of the path as input arguments.","category":"page"},{"location":"filesystem/","page":"Filesystem","title":"Filesystem","text":"tip: Tip\nstatscan should be preferred, whenever several objects are analysed in the same folder. Further analysis should be performed on the SFTP.StatStruct rather than with the convenience functions to improve performance.   The convenience functions are mainly for single operations or when interactively exploring a server, but can mean significantly longer processing times for large folders on the server. Internally, the whole folder content is always scanned and the stats for the desired files are then retrieved from all scans.","category":"page"},{"location":"filesystem/#SFTP.StatStruct","page":"Filesystem","title":"SFTP.StatStruct","text":"struct SFTP.StatStruct\n\nHold information for file system objects on a Server.\n\nFields\n\ndesc::String: file or folder description/name\nmode::UInt: file system object type (file, folder, etc.)\nnlink::Int: number of hard links (contents)\nuid::String: numeric user ID of the owner of the file/folder\nuid::String: numeric group ID (gid) for the file/folder\nsize::Int64: file/folder size in Byte\nmtime::Float64: modified time\n\nConstructors\n\nSFTP.StatStruct(stats::AbstractString) -> SFTP.StatStruct\n\nParse the stats string and return an SFTP.StatStruct.\n\nThe stats are of the format:\n\n\"d--x--x---  151 ftp      ftp          8192 Dec  2  2023 ..\"\n\n\n\n\n\n","category":"type"},{"location":"filesystem/#SFTP.statscan","page":"Filesystem","title":"SFTP.statscan","text":"statscan(\n    sftp::SFTP.Client,\n    path::AbstractString=\".\";\n    sort::Bool=true,\n    show_cwd_and_parent::Bool=false\n) -> Vector{SFTP.StatStruct}\n\nLike stat, but returns a Vector of SFTP.StatStruct with filesystem stats for all objects in the given path.\n\ntip: Tip\nThis should be preferred over stat for performance reasons.\n\nnote: Note\nYou can only run this on directories.\n\nBy default, the SFTP.StatStruct vector is sorted by the descriptions (desc fields). For large folder contents, sort can be set to false to increase performance, if the output order is irrelevant. If show_cwd_and_parent is set to true, the SFTP.StatStruct vector includes entries for \".\" and \"..\" on position 1 and 2, respectively.\n\nsee also: stat\n\n\n\n\n\n","category":"function"},{"location":"filesystem/#Base.stat-Tuple{SFTP.Client, AbstractString}","page":"Filesystem","title":"Base.stat","text":"stat(sftp::SFTP.Client, path::AbstractString=\".\") -> SFTP.StatStruct\n\nReturn a SFTP.StatStruct with information about the path (file, directory or symlink) on the sftp server.\n\nnote: Note\nThis returns only stat data for one object, but stat data for all objects in the same folder is obtained internally. If you need stat data for more than object in the same folder, use statscan for better performance and reduced connections to the server.\n\nsee also: statscan\n\n\n\n\n\n","category":"method"},{"location":"filesystem/#Base.Filesystem.filemode","page":"Filesystem","title":"Base.Filesystem.filemode","text":"filemode(sftp::SFTP.Client, path::AbstractString=\".\") -> UInt\nfilemode(st::SFTP.StatStruct) -> UInt\n\nReturn the filemode of the SFTP.StatStruct. A convenience method exists to directly check the path on the sftp server. However, if several path objects in the same folder are analysed, it is much more performant to use statscan once and then analyse each SFTP.StatStruct.\n\nsee also: ispath, isdir, isfile, islink\n\n\n\n\n\n","category":"function"},{"location":"filesystem/#Base.Filesystem.ispath-Tuple{SFTP.Client, AbstractString}","page":"Filesystem","title":"Base.Filesystem.ispath","text":"ispath(sftp::SFTP.Client, path::AbstractString=\".\") -> Bool\n\nReturn true, if a path exists on the sftp server, i.e. is a file, folder or link. Otherwise, return false.\n\nsee also: filemode, isdir, isfile, islink\n\n\n\n\n\n","category":"method"},{"location":"filesystem/#Base.Filesystem.isdir","page":"Filesystem","title":"Base.Filesystem.isdir","text":"isdir(sftp::SFTP.Client, path::AbstractString=\".\") -> Bool\nisdir(st::SFTP.StatStruct) -> Bool\n\nAnalyse the SFTP.StatStruct and return true for a directory, false otherwise. A convenience method exists to directly check the path on the sftp server. However, if several path objects in the same folder are analysed, it is much more performant to use statscan once and then analyse each SFTP.StatStruct.\n\nsee also: filemode, ispath, isfile, islink\n\n\n\n\n\n","category":"function"},{"location":"filesystem/#Base.Filesystem.isfile","page":"Filesystem","title":"Base.Filesystem.isfile","text":"isfile(sftp::SFTP.Client, path::AbstractString=\".\") -> Bool\nisfile(st::SFTP.StatStruct) -> Bool\n\nAnalyse the SFTP.StatStruct and return true for a file, false otherwise. A convenience method exists to directly check the path on the sftp server. However, if several path objects in the same folder are analysed, it is much more performant to use statscan once and then analyse each SFTP.StatStruct.\n\nsee also: filemode, ispath, isdir, islink\n\n\n\n\n\n","category":"function"},{"location":"filesystem/#Base.Filesystem.islink","page":"Filesystem","title":"Base.Filesystem.islink","text":"islink(sftp::SFTP.Client, path::AbstractString=\".\") -> Bool\nislink(st::SFTP.StatStruct) -> Bool\n\nAnalyse the SFTP.StatStruct and return true for a symbolic link, false otherwise. A convenience method exists to directly check the path on the sftp server. However, if several path objects in the same folder are analysed, it is much more performant to use statscan once and then analyse each SFTP.StatStruct.\n\nsee also: filemode, ispath, isdir, isfile\n\n\n\n\n\n","category":"function"},{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/#Request-Error-5","page":"Troubleshooting","title":"Request Error -5","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"RequestError: Failure establishing ssh session: -5, Unable to exchange encryption keys while requesting...","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solution:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Try and upgrade to Julia 1.9.4. It seems to be a bug in an underlying library.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If it does not work, check your known_hosts file in your .ssh directory. ED25519 keys do not seem to work.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Use the ssh-keyscan tool:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"From command line, execute: ssh-keyscan [hostname]. Add the ecdsa-sha2-nistp256 line to your known_hosts file. This file is located in your .ssh directory. This is directory is located  in C:\\Users\\{your_user}\\.ssh on Windows and ~/.ssh on Linux and Mac.","category":"page"},{"location":"troubleshooting/#Note:-Setting-up-certificate-authentication","page":"Troubleshooting","title":"Note: Setting up certificate authentication","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"To set up certificate authentication, create the certificates in the ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub files. On Windows these are located in C:\\Users\\{your user}\\.ssh.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Then use the function  sftp = SFTP(\"sftp://mysitewhereIhaveACertificate.com\", \"myuser\") to create a SFTP type.","category":"page"},{"location":"troubleshooting/#Example-files","page":"Troubleshooting","title":"Example files","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"known_hosts:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"mysitewhereIhaveACertificate.com ssh-rsa sdsadxcvacvljsdflsajflasjdfasldjfsdlfjsldfj","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"id_rsa:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"-----BEGIN RSA PRIVATE KEY-----\n.....\ncu1sTszTVkP5/rL3CbI+9rgsuCwM67k3DiH4JGOzQpMThPvolCg=\n\n-----END RSA PRIVATE KEY-----","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"id_rsa.pub:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"ssh-rsa AAAAB3...SpjX/4t Comment here","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"After setting up the files, test using your local sftp client:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"ssh myuser@mysitewhereIhaveACertificate.com","category":"page"},{"location":"#SFTP.jl","page":"Home","title":"SFTP.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An SFTP Client for Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"SFTP.jl is a pure Julia package for connecting to servers with the secure file transfer protocol (SFTP), supporting authentication by username and password or by certificates. Main purpose is the file exchange between the SFTP server and the local system. Basic file system functions similar to Julia's Base functions and to the typical Linux functionality exist to explore the SFTP server.","category":"page"},{"location":"#SFTP-Feature-overview","page":"Home","title":"SFTP Feature overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Connection to SFTP server by username/password or with certificate authentication\nFile upload/download to/from server\nInspect the server with file system functions like walkdir, readdir, stat/statscan, filemode, ispath, isdir, isfile, islink\nNavigate and manipulate server content with functions like pwd, cd, mv, rm, mkdir, mkpath\nCreate script with the help of further filesystem functions like joinpath, basename, dirname or splitdir","category":"page"},{"location":"#SFTP-Installation","page":"Home","title":"SFTP Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install using the package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\n\npkg> add SFTP","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"index.md\",\n    \"server.md\",\n    \"filesystem.md\",\n    \"troubleshooting.md\",\n    \"release-notes.md\",\n    \"register.md\"\n]","category":"page"},{"location":"register/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"register/","page":"Index","title":"Index","text":"","category":"page"}]
}
